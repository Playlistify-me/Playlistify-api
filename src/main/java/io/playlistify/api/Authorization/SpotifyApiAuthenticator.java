package io.playlistify.api.Authorization;

import io.playlistify.api.Factories.SpotifyApiFactory;
import io.playlistify.api.GenerateRandomString;
import org.apache.hc.core5.http.ParseException;
import se.michaelthelin.spotify.SpotifyApi;
import se.michaelthelin.spotify.exceptions.SpotifyWebApiException;
import se.michaelthelin.spotify.model_objects.credentials.AuthorizationCodeCredentials;
import se.michaelthelin.spotify.requests.authorization.authorization_code.AuthorizationCodeRequest;
import se.michaelthelin.spotify.requests.authorization.authorization_code.AuthorizationCodeUriRequest;

import java.io.IOException;
import java.net.URI;

public class SpotifyApiAuthenticator {
    private final SpotifyApi spotifyApi = SpotifyApiFactory.getBasicSpotifyApi();

    /**
     * The authorization code received from the client.
     */
    private String authCode;

    /**
     * The state of the {@link SpotifyApiAuthenticator#spotifyApi}.
     * Generated by {@link GenerateRandomString#generateString}.
     */
    private String state = GenerateRandomString.generateString(generatedStringLength);;

    /**
     * The length of the {@link GenerateRandomString#generateString}.
     */
    private static final int generatedStringLength = 35;

    /**
     * The authorization code {@link URI}.
     */
    private URI authCodeUri = generateAuthCodeUri();

    /**
     * Constructor for the {@link SpotifyApiAuthenticator} class.
     * Use this instance to generate the {@link #authCodeUri}.
     */
    public SpotifyApiAuthenticator() {
    }

    /**
     * Constructor for the {@link SpotifyApiAuthenticator} class.
     * This class is used to authenticate the {@link SpotifyApi}.
     * @param authCode The authorization code received from the client.
     */
    public SpotifyApiAuthenticator(String authCode) {
        setAuthCode(authCode);
        setAccessAndRefreshToken();
    }

    /**
     * Gets the {@link AuthorizationCodeRequest} required for the {@link AuthorizationCodeCredentials}.
     * @return
     */
    private AuthorizationCodeRequest getAuthorizationCodeRequest() {
        return spotifyApi.authorizationCode(authCode)
                .build();
    }

    /**
     * Requests and sets the Access and Refresh tokens for the {@link SpotifyApi} object.
     */
    public void setAccessAndRefreshToken() {
        AuthorizationCodeRequest authorizationCodeRequest = getAuthorizationCodeRequest();

        try {
            final AuthorizationCodeCredentials authorizationCodeCredentials = authorizationCodeRequest.execute();

            spotifyApi.setAccessToken(authorizationCodeCredentials.getAccessToken());
            // TODO:
            //  Set the refresh token in the database.
            //  This is done by calling the UserService.setRefreshTokenForUserId(UUID userId, String refreshToken) method.
            spotifyApi.setRefreshToken(authorizationCodeCredentials.getRefreshToken());
            // TODO:
            //  Set the refresh token in the database.
            //  This is done by calling the UserService.setRefreshTokenForUserId(UUID userId, String refreshToken) method.
        } catch (IOException | SpotifyWebApiException | ParseException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    /**
     * Generates the {@link #authCodeUri} from the {@link AuthorizationCodeUriRequest} object.
     * @return {@link #authCodeUri}.
     */
    private URI generateAuthCodeUri() {
        return getAuthorizationCodeUriRequest().execute();
    }

    /**
     * Gets the {@link AuthorizationCodeUriRequest} required for the {@link #authCode}.
     * @return {@link AuthorizationCodeUriRequest}
     */
    private AuthorizationCodeUriRequest getAuthorizationCodeUriRequest() {
        return spotifyApi.authorizationCodeUri()
                //.state(#GenerateRandomString() random string here <-)
                //.scope() scope here
                .build();
    }

    public SpotifyApi getSpotifyApi() {
        return spotifyApi;
    }

    /**
     * Gets the {@link #authCodeUri}.
     *
     * @return {@link #authCodeUri}.
     */
    public URI getAuthCodeUri() {
        return authCodeUri;
    }

    /**
     * Gets the authorization code.
     *
     * @return {@link #authCode}.
     */
    public String getAuthCode() {
        return this.authCode;
    }

    /**
     * Sets the {@link #authCode}.
     * @param authCode The new authorization code.
     */
    public void setAuthCode(String authCode) {
        if (authCode != null) {
            this.authCode = authCode;
        } else {
            throw new IllegalArgumentException("authCode cannot be null");
        }
    }
}
